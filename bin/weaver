#!/usr/bin/env node
var red      = '\033[01;31m',
	green    = '\033[01;32m',
	yellow   = '\033[01;33m',
	clear    = '\033[00m';

'use strict';

var net      = require('net'),
	resolve  = require('path').resolve,
	exists   = require('fs').existsSync,
	optimist = require('optimist'),
	sprintf  = require('sprintf').sprintf,
	isatty   = require('tty').isatty,
	argv     = optimist
		.boolean(['help', 'debug', 'nocolor', 'version'])
		.default('port', process.env.WEAVER_PORT || 8092)
		.default('debug', !!process.env.WEAVER_DEBUG)
		.default('config', 'weaver.json')
		.usage([
			'Usage:',
			'    weaver [--port <number>] [--config <path>] [--debug]',
			'    weaver [--port <number>] [--config <path>] upgrade',
			'    weaver [--port <number>] restart [[task|pid], ...]',
			'    weaver [--port <number>] stop [[task|pid], ...]',
			'    weaver [--port <number>] kill <signal> [[task|pid], ...]',
			'    weaver [--port <number>] drop <task>',
			'    weaver [--port <number>] [--nocolor] status',
			'    weaver [--port <number>] [--nocolor] dump',
			'    weaver [--port <number>] monitor',
			'    weaver [--port <number>] exit',
			'',
			'Commands:',
			'    upgrade',
			'        Re-read config file',
			'    restart',
			'        Restart all tasks, task group, task by pid',
			'    stop',
			'        Stop all tasks, task group, task by pid',
			'    kill',
			'        Send signal to task group or task by pid',
			'    drop',
			'        Stop task group and remove it from configuration',
			'    status',
			'        Show status for all tasks',
			'    dump',
			'        Show current configuration',
			'    monitor',
			'        Show log messages from running weaver',
			'    exit',
			'        Stop all tasks and exit',
			''
		].join('\n'))
		.describe({
			config  : 'Configuration file',
			debug   : 'Do not fork and give additional output. Makes sense only for start',
			nocolor : 'Do not use colors for output',
			help    : 'Show help and exit',
			version : 'Show version and exit',
			port    : 'Use specified port'
		})
		.argv,
	command = argv._.shift(),
	ok      = true;

/* Disable colors */
argv.nocolor = argv.nocolor || !isatty(1);

if (argv.nocolor) {
	red    = '';
	green  = '';
	yellow = '';
	clear  = '';
}

/* Help requested */
if (argv.help) {
	optimist.showHelp();
	process.exit();
}

/* Show version */
if (argv.version) {
	console.log(require('../package').version);
	process.exit();
}

/* Check command */
switch (command) {
	case 'drop':
	case 'kill':
		ok = !!argv._.length;
		break;

	case 'stop':
	case 'restart':
		break;

	case 'upgrade':
		ok = exists(argv.config) && !argv._.length;
		break;

	case 'status':
	case 'dump':
	case 'monitor':
	case 'exit':
		ok = !argv._.length;
		break;

	/* Daemon mode */
	case undefined:
		break;

	/* Unknown command */
	default:
		ok = false;
}

if (!ok) {
	optimist.showHelp();
	process.exit(1);
}

if (!command) {
	var code   = 0,
		daemon = require((process.env.WEAVER_TEST? '..' : 'weaver') + '/lib/daemon'),
		child  = require('child_process').spawn(daemon, [
				JSON.stringify({
					config : exists(argv.config)? resolve(argv.config) : null,
					port   : argv.port,
					debug  : argv.debug
				})
			], {
				detached : !argv.debug,
				stdio    : argv.debug? 'inherit' : ['ignore', 'ignore', 'pipe'],
				env      : process.env
			});

	if (!argv.debug) {
		child.stderr.on('data', function (data) {
			code = 1;
			process.stderr.write(data.toString());
		});

		setTimeout(function () {
			/* Wait 150ms for possible errors and exit */
			process.exit(code);
		}, 150);

		child.unref();
	}
} else if (command === 'monitor') {
	var udp    = require('dgram').createSocket('udp4'),
		stdout = process.stdout;

	/* Send all UDP messages to STDOUT */
	udp.on('message', function (data) {
		stdout.write(String(data));
	});

	udp.bind(argv.port);
} else {
	var socket   = net.connect(argv.port),
		response = '',
		data, parameters;

	/* Prepare arguments */
	switch (command) {
		case 'upgrade':
			parameters = JSON.stringify([resolve(argv.config)]);
			break;

		case 'kill':
			var signal = argv._.shift()
				.replace(/^(?!sig)/i, 'sig')
				.toUpperCase();

			parameters = JSON.stringify([signal].concat(argv._));
			break;

		case 'drop':
		case 'stop':
		case 'restart':
			parameters = JSON.stringify(argv._);
			break;
	}

	data = [command, parameters || '[]', '']
		.join('\r\n');

	/* Send command and arguments */
	socket.once('connect', socket.write.bind(socket, data));

	/* Handle errors */
	socket.on('error', function (error) {
		console.warn('Could not connect to weaver on port ' + argv.port);
		process.exit(1);
	});

	/* Receive response */
	socket.on('data', function (data) {
		if (data instanceof Buffer) {
			data = data.toString();
		}

		response += data;
	});

	/* Handle response */
	socket.once('end', function () {
		var result = JSON.parse(response);

		if (result.status === 'ok') {
			switch (command) {
				case 'status':
					printStatus(result);
					break;

				case 'dump':
					printDump(result);
					break;
			}
		} else {
			console.warn(result.message);
		}
	});
}

function printStatus (result) {
	var tasks   = result.tasks,
		lname   = 0,
		lsource = 0,
		now     = Date.now(),
		name, task, subtasks, i, l, pid, status, color;

	console.log(
		green + sprintf('%5u', result.pid) + clear +
		(argv.nocolor? '  ' : '') +
		sprintf(' %3s', elapsed(result.uptime)) +
		' weaver ' + result.version + ' (' + yellow + result.memory + 'K' + clear + ')'
	);

	for (name in tasks) {
		if (!tasks.hasOwnProperty(name)) {
			continue;
		}

		/* Find longest name */
		if (name.length > lname) {
			lname = name.length;
		}

		/* Find longest source */
		if (tasks[name].source.length > lsource) {
			lsource = tasks[name].source.length;
		}
	}

	for (name in tasks) {
		if (!tasks.hasOwnProperty(name)) {
			continue;
		}

		task     = tasks[name];
		subtasks = task.subtasks;

		for (i = 0, l = subtasks.length; i < l; i++) {
			pid = subtasks[i].pid;
			status = subtasks[i].status;

			switch (status) {
				case 'D':
				case 'W':
					color = green;
					break;

				case 'S':
				case 'R':
					color = yellow;
					break;

				default:
					color = red;
			}

			console.log(
				color +
				sprintf('%5u', subtasks[i].pid) +
				clear +
				(argv.nocolor? ' ' + status : '') +
				sprintf(' %3s', elapsed(subtasks[i].uptime)) +
				sprintf(' %-' + lname + 's %-' + lsource + 's %s', name, task.source, subtasks[i].args.join(' '))
			);
		}
	}
}

function printDump (result) {
	var inspect = require('util').inspect;

	console.log(inspect(result.config, false, null, !argv.nocolor));
}

function elapsed (delta) {
	delta /= 1000;

	if (delta < 60)         return time(delta, 's');
	if ((delta /= 60) < 60) return time(delta, 'm');
	if ((delta /= 60) < 24) return time(delta, 'h');
	if ((delta /= 24) < 7)  return time(delta, 'd');

	return time(delta / 7, 'w');
}

function time (value, units) {
	return (value << 0 || 1) + units;
}

/* vim: set ft=javascript : */
