#!/usr/bin/env node
'use strict';

var Weaver, daemon, command, server,
	ok       = true,
	net      = require('net'),
	optimist = require('optimist'),
	argv     = optimist
		.default('port', 8092)
		.boolean(['help', 'daemon', 'debug'])
		.describe({
			daemon : 'Start daemon if it was not started before',
			config : 'Configuration file. Required to start daemon',
			debug  : 'Do not fork and give additional output',
			help   : 'Show help',
			port   : 'Use specified port'
		})
		.argv;

/* Not enough arguments */
if (process.argv.length == 2)
	ok = false;

/* Help requested */
if (argv.help)
	ok = false;

/* Config required for daemon */
if (argv.daemon && !argv.config)
	ok = false;

/* No command */
if (!argv.daemon && !argv._.length)
	ok = false;

/* Daemon can not run command */
if (argv.daemon && argv._.length)
	ok = false;

command = argv._[0];

/* Check command */
if (!argv.daemon)
	switch (command) {
		case 'upgrade':
		case 'status':
		case 'stop':
			/* TODO: check command arguments */
			break;

		default:
			ok = false;
	}

if (!ok) {
	optimist.showHelp();
	process.exit(1);
}

if (argv.daemon) {
	var daemon = require('daemon'),
		Weaver = new require('../lib/weaver')(argv.config),
		server = net.createServer();

	if (!argv.debug)
		daemon.start();

	/* Signal handlers */
	process
		.on('SIGINT',  Weaver.die)
		.on('SIGTERM', Weaver.die)
		.on('SIGKILL', Weaver.die)
		.on('SIGHUP',  Weaver.config);

	/* Setup control interface */
	server
		.listen(argv.port, 'localhost')
		.on('connection', accept);
}

function accept (socket) {
	socket.once('data', execute);
}

function execute (command) {
	var result = { status: 'ok' },
		tasks, task, subtasks, name, i, l, subtask;

	command = command.toString().replace(/[\r\n]+$/, '');

	switch (command) {
		case 'stop':
			Weaver.die();
			break;

		case 'upgrade':
			Weaver.config();
			break;

		case 'status':
			result.tasks = {};
			tasks = Weaver.tasks;

			for (name in tasks) {
				if (!tasks.hasOwnProperty(name)) continue;

				result.tasks[name] = task = {
					count    : tasks[name].count,
					source   : tasks[name].source,
					restart  : tasks[name].restart,
					subtasks : []
				};

				subtasks = tasks[name].subtasks;

				for (i = 0, l = subtasks.length; i < l; i++) {
					subtask = subtasks[i];
					task.subtasks.push(subtask? {
						pid  : subtask.pid,
						args : subtask.args,
						time : subtask.time
					} : null);
				}
			}

			break;

		default:
			result = {
				status: 'error',
				message: 'Unknown command'
			};
	}

	this.end(JSON.stringify(result) + '\r\n');
}

/* vim: set ft=javascript : */
