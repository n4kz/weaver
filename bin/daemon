#!/usr/bin/env node
'use strict';

var udp     = require('dgram').createSocket('udp4'),
	net     = require('net'),
	fs      = require('fs'),
	dirname = require('path').dirname,
	log     = console.log,
	params  = JSON.parse(process.argv[2]),
	Weaver  = require('../lib/weaver');

if (!params.debug) {
	/* Send stdout and stderr to udp */
	log = function (data) {
		data = new Buffer(data + '\n');
		udp.send(data, 0, data.length, params.port, 'localhost');
	};
}

Weaver.log = function (message) {
	if (this === Weaver) {
		message = process.pid + ' (weaver) ' + message;
	} else {
		message = message.slice(0);
	}

	log(message);
};

/* Read config file */
if (params.config) {
	readFile(params.config);
}

process.chdir('/');
process.title = 'weaver [' + params.port + ']';

/* Signal handlers */
process
	.on('SIGINT',  function () { Weaver.die(2)  })
	.on('SIGTERM', function () { Weaver.die(15) });

/* Setup control interface */
net.createServer()
	.listen(params.port, 'localhost')
	.on('connection', function (socket) {
		socket.once('data', execute);
	});

Weaver.log('Started');

function readFile (filename) {
	fs.readFile(String(filename), function (error, data) {
		if (error) {
			Weaver.emit('error', error);
		} else {
			Weaver.upgrade(data, dirname(filename));
		}
	});
}

function execute (data) {
	var args   = [],
		result = {
			version : Weaver.version,
			uptime  : Date.now() - Weaver.start,
			status  : 'ok',
			pid     : process.pid,
			memory  : process.memoryUsage().rss >> 10
		},
		argv, command, params;

	try {
		argv = data.toString()
			.replace(/[\r\n]+$/, '')
			.split('\r\n', 2);

		command = argv.shift();
		params  = JSON.parse(argv.shift() || '[]');
	} catch (error) {
		result.status  = 'error';
		result.message = error.message;

		command = null;
	}

	switch (command) {
		case 'kill':
		case 'stop':
		case 'restart':
			/* Push signal name to args */
			if (command === 'kill') {
				args.push(params.shift());
			}

			if (params.length) {
				/* by name/pid */
				params.forEach(function (name) {
					Weaver.command(command, String(name), args);
				});
			} else {
				/* all */
				Weaver.command(command, null, args);
			}

			break;

		case 'drop':
			/* Remove tasks from configuration */
			params.forEach(function (name) {
				delete Weaver.config[name];
			});

			Weaver.emit('upgrade');
			break;

		case 'exit':
			Weaver.die(0);
			break;

		case 'upgrade':
			readFile(params.shift());
			break;

		case 'dump':
			result.config = Weaver.config;
			break;

		case 'status':
			result.tasks = Weaver.status();
			break;

		case null:
			break;

		default:
			result.status  = 'error';
			result.message = 'Unknown command';
	}

	/* Do not close socket on exit */
	this[command === 'exit'? 'write' : 'end'](JSON.stringify(result) + '\r\n');
}

/* vim: set ft=javascript : */
