#!/usr/bin/env node
'use strict';

var udp    = require('dgram').createSocket('udp4'),
	net    = require('net'),
	log    = console.log,
	params = JSON.parse(process.argv[2]),
	Weaver = require('../lib/weaver');

if (!params.debug) {
	/* Send stdout and stderr to udp */
	log = function (data) {
		data = new Buffer(data + '\n');
		udp.send(data, 0, data.length, params.port, 'localhost');
	};
}

Weaver.log = function (message) {
	if (this === Weaver) {
		message = process.pid + ' (weaver) ' + message;
	} else {
		message = message.slice(0);
	}

	log(message);

	return Weaver;
};

/* Read config file */
if (params.config) {
	Weaver.file = params.config;
	Weaver.emit('config');
}

process.chdir('/');
process.title = 'weaver [' + params.port + ']';

/* Signal handlers */
process
	.on('SIGINT',  function () { Weaver.die(2) })
	.on('SIGTERM', function () { Weaver.die(15) })
	.on('SIGHUP',  function () { Weaver.emit('config') });

/* Setup control interface */
net.createServer()
	.listen(params.port, 'localhost')
	.on('connection', function (socket) {
		socket.once('data', execute);
	});

function execute (data) {
	var parameters = data.toString().replace(/[\r\n]+$/, '').split('\r\n', 2),
		command    = parameters[0],
		result     = {
			version : Weaver.version,
			uptime  : Date.now() - Weaver.start,
			status  : 'ok',
			pid     : process.pid,
			memory  : process.memoryUsage().rss >> 10
		},
		i, l, args = [];

	try {
		parameters = JSON.parse(parameters[1] || '[]');
	} catch (error) {
		result.status = 'error';
		result.message = error.message;
		error.message = 'Client error: ' + error.message;

		Weaver.emit('error', error);
		this.end(JSON.stringify(result) + '\r\n');
		return;
	}

	switch (command) {
		case 'kill':
		case 'stop':
		case 'restart':
			/* Push signal name to args */
			if (command === 'kill') {
				args.push(parameters.shift());
			}

			if (l = parameters.length) {
				/* by name/pid */
				for (i = 0; i < l; i++) {
					Weaver.command(command, String(parameters[i]), args);
				}
			} else {
				/* all */
				Weaver.command(command, null, args);
			}

			Weaver.emit('upgrade');
			break;

		case 'exit':
			Weaver.die(0);
			break;

		case 'upgrade':
			if (parameters[0]) {
				Weaver.file = parameters[0];
			}

			Weaver.emit('config');
			break;

		case 'dump':
			result.config = Weaver.parameters;
			break;

		case 'status':
			result.tasks = Weaver.status();
			break;

		default:
			result.status  = 'error';
			result.message = 'Unknown command';
	}

	this.end(JSON.stringify(result) + '\r\n');
}

/* vim: set ft=javascript : */
