#!/usr/bin/env node
'use strict';

require('coffee-script/register');

var net      = require('net'),
	fs       = require('fs'),
	udp      = require('dgram').createSocket('udp4'),
	assert   = require('assert'),
	dirname  = require('path').dirname,
	params   = JSON.parse(process.argv[2]),
	Weaver   = require('../lib/weaver'),
	messages = [];

/* Setup control interface */
var server = net.createServer()
	.listen(params.port, 'localhost')
	.on('connection', function (socket) {
		socket.once('data', execute);
	});

process.chdir('/');
process.title = 'weaver [' + params.port + ']';

process
	/* Setup signal handlers */
	.on('SIGINT',  function () { Weaver.die(128 + 2)  })
	.on('SIGTERM', function () { Weaver.die(128 + 15) })

	/* Setup exception handler */
	.once('uncaughtException', function (error) {
		/* Try to log exception */
		Weaver.log(error.stack);

		/* Shutdown control interface */
		server.close();

		/* Try to exit gracefully */
		Weaver.die(64);
	});

/* Setup exit handler */
Weaver.once('exit', function (code) {
	Weaver.log('Terminated with code ' + code, function () {
		udp.close(function () {
			if (code) {
				if (!params.debug) {
					/* Write recent log messages to STDERR */
					fs.writeSync(2, messages.join(''));
				}

				/* XXX: Not waiting for TCP on unclean exit */
				process.exit(code);
			}
		});
	});
});

Weaver.constructor.logger(log);
Weaver.log('Started');

function readFile (filename) {
	fs.readFile(String(filename), function (error, data) {
		if (error) {
			Weaver.emit('error', error);
		} else {
			Weaver.upgrade(data, dirname(filename));
		}
	});
}

function execute (data) {
	var socket = this,
		args   = [],
		result = {
			version : Weaver.version,
			uptime  : Date.now() - Weaver.start,
			status  : 'ok',
			pid     : process.pid,
			memory  : process.memoryUsage().rss >> 10
		},
		argv, command, parameters, data;

	try {
		argv = data.toString()
			.replace(/[\r\n]+$/, '')
			.split('\r\n', 2);

		command    = argv.shift();
		parameters = JSON.parse(argv.shift());

		assert.ok(Array.isArray(parameters), 'Array expected');
	} catch (error) {
		result.status  = 'error';
		result.message = error.message;

		command = null;
	}

	switch (command) {
		case 'kill':
		case 'stop':
		case 'restart':
			/* Push signal name to args */
			if (command === 'kill') {
				args.push(parameters.shift());
			}

			if (parameters.length) {
				/* by name/pid */
				parameters.forEach(function (name) {
					Weaver.command(command, String(name), args);
				});
			} else {
				/* all */
				Weaver.command(command, null, args);
			}

			break;

		case 'drop':
			/* Remove tasks from configuration */
			parameters.forEach(function (name) {
				delete Weaver.config[name];
			});

			Weaver.emit('upgrade');
			break;

		case 'exit':
			Weaver.die(0);
			break;

		case 'upgrade':
			readFile(parameters.shift());
			break;

		case 'dump':
			result.config = Weaver.config;
			break;

		case 'status':
			result.tasks = Weaver.status();
			break;

		case null:
			break;

		default:
			result.status  = 'error';
			result.message = 'Unknown command';
	}

	data = JSON.stringify(result) + '\r\n';

	if (command === 'exit') {
		server.close();

		Weaver.once('exit', function (code) {
			socket.end(data);
		});
	} else {
		socket.end(data);
	}
}

function log (message, callback) {
	message = message
		.replace(/^(?!\d+\s\(.+\))/, process.pid + ' (weaver) ')
		.replace(/\s*$/, '\n');

	if (params.debug) {
		fs.writeSync(1, message);
	}

	messages.push(message);
	messages.splice(0, messages.length - 10);

	var data = new Buffer(message);

	udp.send(data, 0, data.length, params.port, 'localhost', function (error) {
		/* Log errors to STDERR */
		if (error) {
			fs.writeSync(2, error.stack + '\n');
		}

		/* Execute callback if any */
		if (typeof callback === 'function') {
			callback(error);
		}
	});
}

/* vim: set ft=javascript : */
